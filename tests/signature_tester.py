import os
import cv2
import numpy as np
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

from core.signature_normalizer import SignatureNormalizer
from core.signature_features import SignatureFeaturesExtractor
from core.ocs_verifier import OCSVMVerifier
from utils.results_logger import ResultsLogger

from core.image_preprocessor import ImagePreprocessor

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
BASE_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))


# –§–æ—Ä–º–∏—Ä—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏
originals_path = os.path.join(BASE_DIR, "storage", "data", "CEDAR", "originals")
forgeries_path = os.path.join(BASE_DIR, "storage", "data", "CEDAR", "forgeries")
models_path = os.path.join(BASE_DIR, "storage", "models")
logs_path = os.path.join(BASE_DIR, "storage", "logs")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
user_id = "1"
# base_path = "storage/data/CEDAR"
# originals_path = os.path.join(base_path, "originals")
# forgeries_path = os.path.join(base_path, "forgeries")

# –†–∞–∑–±–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∏: 18 –¥–ª—è –æ–±—É—á–µ–Ω–∏—è, 6 –¥–ª—è —Ç–µ—Å—Ç–∞
original_files = sorted([
    f for f in os.listdir(originals_path)
    if f.startswith("original_1_")
])

forgery_files = sorted([
    f for f in os.listdir(forgeries_path)
    if f.startswith("forgeries_1_")
])


train_files = original_files[:18]
test_originals = original_files[18:]  # 6 —à—Ç—É–∫
test_forgeries = forgery_files  # –≤—Å–µ 24

# –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
features_train = []

for fname in train_files:
    img = cv2.imread(os.path.join(originals_path, fname), 0)
    norm = SignatureNormalizer(img).normalize()

    # pre = ImagePreprocessor(norm)
    # pre.apply_threshold()
    # pre.remove_noise()
    # processed_img = pre.get_result()

    feat = SignatureFeaturesExtractor(norm).extract_all()
    features_train.append(feat)

verifier = OCSVMVerifier()
verifier.fit(features_train)
verifier.save_model(user_id)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–∏
X_test = []
y_true = []

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –æ—Ä–∏–≥–∏–Ω–∞–ª–∞—Ö (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å ‚Äú—Å–≤–æ–∏‚Äù ‚Üí 1)
for fname in test_originals:
    img = cv2.imread(os.path.join(originals_path, fname), 0)
    norm = SignatureNormalizer(img).normalize()
    feat = SignatureFeaturesExtractor(norm).extract_all()
    X_test.append(feat)
    y_true.append(1)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–¥–µ–ª–∫–∞—Ö (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å ‚Äú—á—É–∂–∏–µ‚Äù ‚Üí -1)
for fname in test_forgeries:
    img = cv2.imread(os.path.join(forgeries_path, fname), 0)
    norm = SignatureNormalizer(img).normalize()
    feat = SignatureFeaturesExtractor(norm).extract_all()
    X_test.append(feat)
    y_true.append(-1)

# –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
y_pred = verifier.model.predict(X_test)

# –ü–æ–¥—Å—á—ë—Ç –º–µ—Ç—Ä–∏–∫
acc = accuracy_score(y_true, y_pred)
prec = precision_score(y_true, y_pred, pos_label=1)
rec = recall_score(y_true, y_pred, pos_label=1)
f1 = f1_score(y_true, y_pred, pos_label=1)

# –í—ã–≤–æ–¥
print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ OC-SVM –¥–ª—è",user_id,"—á–µ–ª–æ–≤–µ–∫–∞")
print(f"‚úÖ Accuracy:  {acc:.4f}")
print(f"‚úÖ Precision: {prec:.4f}")
print(f"‚úÖ Recall:    {rec:.4f}")
print(f"‚úÖ F1-score:  {f1:.4f}")

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ ‚Äî –≤—ã–≤–æ–¥ TP/FP/FN/TN
tp = sum((np.array(y_pred) == 1) & (np.array(y_true) == 1))
fp = sum((np.array(y_pred) == 1) & (np.array(y_true) == -1))
fn = sum((np.array(y_pred) == -1) & (np.array(y_true) == 1))
tn = sum((np.array(y_pred) == -1) & (np.array(y_true) == -1))

print(f"\nüìå TP: {tp} | FP: {fp} | FN: {fn} | TN: {tn}")

# üì¶ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
logger = ResultsLogger()

metrics = {
    'accuracy': acc,
    'precision': prec,
    'recall': rec,
    'f1_score': f1
}

conf_matrix = {
    'tp': tp,
    'fp': fp,
    'fn': fn,
    'tn': tn
}

logger.log(user_id, metrics, conf_matrix)
print("üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")

